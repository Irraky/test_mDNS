{
  "_from": "electron-better-ipc",
  "_id": "electron-better-ipc@0.1.1",
  "_inBundle": false,
  "_integrity": "sha512-RuhrTV2zKwxP3/N9I8L28VL60TUJZbtI5V1SRftUB6MrzrkQQXSiCCJCrC2l9qhxQHOXwDlMOI5F+WF5G0RQ2Q==",
  "_location": "/electron-better-ipc",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "electron-better-ipc",
    "fetchSpec": "latest",
    "name": "electron-better-ipc",
    "raw": "electron-better-ipc",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/electron-better-ipc/-/electron-better-ipc-0.1.1.tgz",
  "_shasum": "36c54a20499ecb061564ac82c054e88611b90efb",
  "_shrinkwrap": null,
  "_spec": "electron-better-ipc",
  "_where": "/home/irraky/code/js/test/test_mDNS",
  "author": {
    "email": "sindresorhus@gmail.com",
    "name": "Sindre Sorhus",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/electron-better-ipc/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Simplified IPC communication for Electron apps",
  "devDependencies": {
    "ava": "*",
    "electron": "^1.8.4",
    "execa": "^0.10.0",
    "spectron": "^3.8.0",
    "xo": "*"
  },
  "files": [
    "index.js",
    "source"
  ],
  "homepage": "https://github.com/sindresorhus/electron-better-ipc#readme",
  "keywords": [
    "answer",
    "app",
    "async",
    "await",
    "call",
    "communicate",
    "communication",
    "electron",
    "ipc",
    "message",
    "messages",
    "receive",
    "reply",
    "send"
  ],
  "license": "MIT",
  "name": "electron-better-ipc",
  "optionalDependencies": {},
  "readme": "# electron-better-ipc [![Build Status](https://travis-ci.org/sindresorhus/electron-better-ipc.svg?branch=master)](https://travis-ci.org/sindresorhus/electron-better-ipc)\n\n> Simplified IPC communication for Electron apps\n\nThe biggest benefit of this module over the [built-in IPC](https://electronjs.org/docs/api/ipc-main) is that it enables you to send a message and get the response back in the same call. This would usually require multiple IPC subscriptions.\n\nYou can use this module directly in both the main and renderer process.\n\n\n## Install\n\n```\n$ npm install electron-better-ipc\n```\n\n<a href=\"https://www.patreon.com/sindresorhus\">\n\t<img src=\"https://c5.patreon.com/external/logo/become_a_patron_button@2x.png\" width=\"160\">\n</a>\n\n\n## Usage\n\n### Using the built-in IPC\n\nHere, as an example, we use the built-in IPC to get an emoji by name in the renderer process from the main process. Notice how it requires coordinating multiple IPC subscriptions.\n\n###### Main\n\n```js\nconst {ipcMain: ipc} = require('electron');\n\nipc.on('get-emoji', async (event, emojiName) => {\n\tconst emoji = await getEmoji(emojiName);\n\tevent.sender.send('get-emoji-response', emoji);\n});\n```\n\n###### Renderer\n\n```js\nconst {ipcRenderer: ipc} = require('electron');\n\nipc.on('get-emoji-response', (event, emoji) => {\n\tconsole.log(emoji);\n\t//=> 'ðŸ¦„'\n});\n\nipc.send('get-emoji', 'unicorn');\n```\n\n### Using this module\n\nAs you can see below, this module makes it much simpler to handle the communication. You no longer need multiple IPC subscriptions and you can just `await` the response in the same call.\n\n###### Main\n\n```js\nconst ipc = require('electron-better-ipc');\n\nipc.answerRenderer('get-emoji', async emojiName => {\n\tconst emoji = await getEmoji(emojiName);\n\treturn emoji;\n});\n```\n\n###### Renderer\n\n```js\nconst ipc = require('electron-better-ipc');\n\n(async () => {\n\tconst emoji = await ipc.callMain('get-emoji', 'unicorn');\n\tconsole.log(emoji);\n\t//=> 'ðŸ¦„'\n})();\n```\n\nHere we do the inverse of the above, we get an emoji by name in the main process from the renderer process:\n\n###### Renderer\n\n```js\nconst ipc = require('electron-better-ipc');\n\nipc.answerMain('get-emoji', async emojiName => {\n\tconst emoji = await getEmoji(emojiName);\n\treturn emoji;\n});\n```\n\n###### Main\n\n```js\nconst electron = require('electron');\nconst ipc = require('electron-better-ipc');\n\nconst win = electron.BrowserWindow.getFocusedWindow();\n\n(async () => {\n\tconst emoji = await ipc.callRenderer(win, 'get-emoji', 'unicorn');\n\tconsole.log(emoji);\n\t//=> 'ðŸ¦„'\n})();\n```\n\n\n## API\n\nThe export is just the built-in `ipc` module with some added methods, so you can use it as a replacement for `electron.ipcMain`/`electron.ipcRenderer`.\n\nThe API is different in the main and renderer process.\n\n## Main process\n\n### ipc.callRenderer(window, channel, [data])\n\nSend a message to the given window. Returns a Promise for the response.\n\nIn the renderer process, use `ipc.answerMain` to reply to this message.\n\n#### window\n\nType: `BrowserWindow`\n\nThe window to send the message to.\n\n#### channel\n\nType: `string`\n\nThe channel to send the message on.\n\n#### data\n\nType: `any`\n\nData to send to the receiver.\n\n### ipc.answerRenderer(channel, callback)\n\nThis method listens for a message from `ipc.callMain` defined in a renderer process and replies back.\n\n#### channel\n\nType: `string`\n\nThe channel to send the message on.\n\n#### callback([data], window)\n\nType: `Function` `AsyncFunction`\n\nThe return value is sent back to the `ipc.callMain` in the renderer process.\n\n### ipc.sendToRenderers(channel, [data])\n\nSend a message to all renderer processes (windows).\n\n#### channel\n\nType: `string`\n\nThe channel to send the message on.\n\n#### data\n\nType: `any`\n\nData to send to the receiver.\n\n## Renderer process\n\n### ipc.callMain(channel, [data])\n\nSend a message to the main process. Returns a Promise for the response.\n\nIn the main process, use `ipc.answerRenderer` to reply to this message.\n\n#### channel\n\nType: `string`\n\nThe channel to send the message on.\n\n#### data\n\nType: `any`\n\nData to send to the receiver.\n\n### ipc.answerMain(channel, callback)\n\nThis method listens for a message from `ipc.callRenderer` defined in the main process and replies back.\n\n#### channel\n\nType: `string`\n\nThe channel to send the message on.\n\n#### callback([data])\n\nType: `Function` `AsyncFunction`\n\nThe return value is sent back to the `ipc.callRenderer` in the main process.\n\n\n## Related\n\n- [electron-store](https://github.com/sindresorhus/electron-store) - Simple data persistence for your Electron app\n- [electron-timber](https://github.com/sindresorhus/electron-timber) - Pretty logger for Electron apps\n- [electron-serve](https://github.com/sindresorhus/electron-serve) - Static file serving for Electron apps\n- [electron-debug](https://github.com/sindresorhus/electron-debug) - Adds useful debug features to your Electron app\n- [electron-unhandled](https://github.com/sindresorhus/electron-unhandled) - Catch unhandled errors and promise rejections in your Electron app\n- [electron-context-menu](https://github.com/sindresorhus/electron-context-menu) - Context menu for your Electron app\n- [electron-dl](https://github.com/sindresorhus/electron-dl) - Simplified file downloads for your Electron app\n\n\n## License\n\nMIT Â© [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/electron-better-ipc.git"
  },
  "scripts": {
    "test": "xo && cd test/fixture && ava"
  },
  "version": "0.1.1",
  "xo": {
    "envs": [
      "browser",
      "node"
    ]
  }
}
